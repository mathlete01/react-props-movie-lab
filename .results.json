{
  "stats": {
    "suites": 4,
    "tests": 14,
    "passes": 10,
    "pending": 0,
    "failures": 4,
    "start": "2020-12-15T04:34:33.094Z",
    "end": "2020-12-15T04:34:33.150Z",
    "duration": 56
  },
  "tests": [
    {
      "title": "renders at least one <MovieCard /> component",
      "fullTitle": "<MovieShowcase /> renders at least one <MovieCard /> component",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "renders 9 <MovieCard /> components",
      "fullTitle": "<MovieShowcase /> renders 9 <MovieCard /> components",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "passes all 4 props to every component",
      "fullTitle": "<MovieShowcase /> passes all 4 props to every component",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "has generated the correct prop values for the first movie",
      "fullTitle": "<MovieShowcase /> has generated the correct prop values for the first movie",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "expected '\"cats, adventure, romance\"' to equal '[\"cats\",\"adventure\",\"romance\"]'",
        "showDiff": true,
        "actual": "\"cats, adventure, romance\"",
        "expected": "[\"cats\",\"adventure\",\"romance\"]",
        "stack": "AssertionError: expected '\"cats, adventure, romance\"' to equal '[\"cats\",\"adventure\",\"romance\"]'\n    at Context.<anonymous> (test/0-MovieShowcase.test.js:41:59)\n    at processImmediate (node:internal/timers:462:21)"
      }
    },
    {
      "title": "has generated the correct prop values for the last movie",
      "fullTitle": "<MovieShowcase /> has generated the correct prop values for the last movie",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "expected '\"crime, period piece\"' to equal '[\"crime\",\"period piece\"]'",
        "showDiff": true,
        "actual": "\"crime, period piece\"",
        "expected": "[\"crime\",\"period piece\"]",
        "stack": "AssertionError: expected '\"crime, period piece\"' to equal '[\"crime\",\"period piece\"]'\n    at Context.<anonymous> (test/0-MovieShowcase.test.js:48:60)\n    at processImmediate (node:internal/timers:462:21)"
      }
    },
    {
      "title": "assigns a default prop of 'Unknown' for the title prop",
      "fullTitle": "<MovieCard /> assigns a default prop of 'Unknown' for the title prop",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "assigns a default prop of null for the IMDBRating prop",
      "fullTitle": "<MovieCard /> assigns a default prop of null for the IMDBRating prop",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "assigns a default prop of ['No Genre(s) Found'] for the genres prop",
      "fullTitle": "<MovieCard /> assigns a default prop of ['No Genre(s) Found'] for the genres prop",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "assigns a default prop of 'default' for the poster prop",
      "fullTitle": "<MovieCard /> assigns a default prop of 'default' for the poster prop",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "uses the poster prop as a background image, rendering only the necessary HTML",
      "fullTitle": "<CardFront /> uses the poster prop as a background image, rendering only the necessary HTML",
      "duration": 4,
      "currentRetry": 0,
      "err": {
        "message": "expected '<div class=\"card-front\" style=\"background-image:url(undefined)\"></div>' to equal '<div class=\"card-front\" style=\"background-image:url(you spin me right round)\"></div>'",
        "showDiff": true,
        "actual": "<div class=\"card-front\" style=\"background-image:url(undefined)\"></div>",
        "expected": "<div class=\"card-front\" style=\"background-image:url(you spin me right round)\"></div>",
        "stack": "AssertionError: expected '<div class=\"card-front\" style=\"background-image:url(undefined)\"></div>' to equal '<div class=\"card-front\" style=\"background-image:url(you spin me right round)\"></div>'\n    at Context.<anonymous> (test/2-CardFront.test.js:15:33)\n    at processImmediate (node:internal/timers:462:21)"
      }
    },
    {
      "title": "correctly renders the title prop",
      "fullTitle": "<CardBack /> correctly renders the title prop",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "correctly renders the genres prop as comma seperated strings",
      "fullTitle": "<CardBack /> correctly renders the genres prop as comma seperated strings",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "expected 'Rolling in the DeepNever gonna give you upNever gonna let you downNever gonna run around and desert you' to include 'Never gonna give you up, Never gonna let you down, Never gonna run around and desert you'",
        "showDiff": false,
        "actual": "Rolling in the DeepNever gonna give you upNever gonna let you downNever gonna run around and desert you",
        "stack": "AssertionError: expected 'Rolling in the DeepNever gonna give you upNever gonna let you downNever gonna run around and desert you' to include 'Never gonna give you up, Never gonna let you down, Never gonna run around and desert you'\n    at Context.<anonymous> (test/3-CardBack.test.js:28:21)\n    at processImmediate (node:internal/timers:462:21)"
      }
    },
    {
      "title": "renders 'No Rating Found' in an <h4> if the IMDBRating prop is null",
      "fullTitle": "<CardBack /> renders 'No Rating Found' in an <h4> if the IMDBRating prop is null",
      "duration": 4,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "renders an <img> tag if the IMDBRating prop is valid",
      "fullTitle": "<CardBack /> renders an <img> tag if the IMDBRating prop is valid",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    }
  ],
  "pending": [],
  "failures": [
    {
      "title": "has generated the correct prop values for the first movie",
      "fullTitle": "<MovieShowcase /> has generated the correct prop values for the first movie",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "expected '\"cats, adventure, romance\"' to equal '[\"cats\",\"adventure\",\"romance\"]'",
        "showDiff": true,
        "actual": "\"cats, adventure, romance\"",
        "expected": "[\"cats\",\"adventure\",\"romance\"]",
        "stack": "AssertionError: expected '\"cats, adventure, romance\"' to equal '[\"cats\",\"adventure\",\"romance\"]'\n    at Context.<anonymous> (test/0-MovieShowcase.test.js:41:59)\n    at processImmediate (node:internal/timers:462:21)"
      }
    },
    {
      "title": "has generated the correct prop values for the last movie",
      "fullTitle": "<MovieShowcase /> has generated the correct prop values for the last movie",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "expected '\"crime, period piece\"' to equal '[\"crime\",\"period piece\"]'",
        "showDiff": true,
        "actual": "\"crime, period piece\"",
        "expected": "[\"crime\",\"period piece\"]",
        "stack": "AssertionError: expected '\"crime, period piece\"' to equal '[\"crime\",\"period piece\"]'\n    at Context.<anonymous> (test/0-MovieShowcase.test.js:48:60)\n    at processImmediate (node:internal/timers:462:21)"
      }
    },
    {
      "title": "uses the poster prop as a background image, rendering only the necessary HTML",
      "fullTitle": "<CardFront /> uses the poster prop as a background image, rendering only the necessary HTML",
      "duration": 4,
      "currentRetry": 0,
      "err": {
        "message": "expected '<div class=\"card-front\" style=\"background-image:url(undefined)\"></div>' to equal '<div class=\"card-front\" style=\"background-image:url(you spin me right round)\"></div>'",
        "showDiff": true,
        "actual": "<div class=\"card-front\" style=\"background-image:url(undefined)\"></div>",
        "expected": "<div class=\"card-front\" style=\"background-image:url(you spin me right round)\"></div>",
        "stack": "AssertionError: expected '<div class=\"card-front\" style=\"background-image:url(undefined)\"></div>' to equal '<div class=\"card-front\" style=\"background-image:url(you spin me right round)\"></div>'\n    at Context.<anonymous> (test/2-CardFront.test.js:15:33)\n    at processImmediate (node:internal/timers:462:21)"
      }
    },
    {
      "title": "correctly renders the genres prop as comma seperated strings",
      "fullTitle": "<CardBack /> correctly renders the genres prop as comma seperated strings",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "expected 'Rolling in the DeepNever gonna give you upNever gonna let you downNever gonna run around and desert you' to include 'Never gonna give you up, Never gonna let you down, Never gonna run around and desert you'",
        "showDiff": false,
        "actual": "Rolling in the DeepNever gonna give you upNever gonna let you downNever gonna run around and desert you",
        "stack": "AssertionError: expected 'Rolling in the DeepNever gonna give you upNever gonna let you downNever gonna run around and desert you' to include 'Never gonna give you up, Never gonna let you down, Never gonna run around and desert you'\n    at Context.<anonymous> (test/3-CardBack.test.js:28:21)\n    at processImmediate (node:internal/timers:462:21)"
      }
    }
  ],
  "passes": [
    {
      "title": "renders at least one <MovieCard /> component",
      "fullTitle": "<MovieShowcase /> renders at least one <MovieCard /> component",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "renders 9 <MovieCard /> components",
      "fullTitle": "<MovieShowcase /> renders 9 <MovieCard /> components",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "passes all 4 props to every component",
      "fullTitle": "<MovieShowcase /> passes all 4 props to every component",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "assigns a default prop of 'Unknown' for the title prop",
      "fullTitle": "<MovieCard /> assigns a default prop of 'Unknown' for the title prop",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "assigns a default prop of null for the IMDBRating prop",
      "fullTitle": "<MovieCard /> assigns a default prop of null for the IMDBRating prop",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "assigns a default prop of ['No Genre(s) Found'] for the genres prop",
      "fullTitle": "<MovieCard /> assigns a default prop of ['No Genre(s) Found'] for the genres prop",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "assigns a default prop of 'default' for the poster prop",
      "fullTitle": "<MovieCard /> assigns a default prop of 'default' for the poster prop",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "correctly renders the title prop",
      "fullTitle": "<CardBack /> correctly renders the title prop",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "renders 'No Rating Found' in an <h4> if the IMDBRating prop is null",
      "fullTitle": "<CardBack /> renders 'No Rating Found' in an <h4> if the IMDBRating prop is null",
      "duration": 4,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "renders an <img> tag if the IMDBRating prop is valid",
      "fullTitle": "<CardBack /> renders an <img> tag if the IMDBRating prop is valid",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    }
  ]
}